use [master];
go

if db_id('Academy') is not null
begin
	drop database [Academy];
end
go

create database [Academy];
go

use [Academy];
go

create table [Assistants]
(
	[Id] int not null identity(1, 1) primary key,
	[TeacherId] int not null
);
go

create table [Curators]
(
	[Id] int not null identity(1, 1) primary key,
	[TeacherId] int not null
);
go

create table [Deans]
(
	[Id] int not null identity(1, 1) primary key,
	[TeacherId] int not null
);
go

create table [Departments]
(
	[Id] int not null identity(1, 1) primary key,
	[Building] int not null check ([Building] between 1 and 5),
	[Name] nvarchar(100) not null unique check ([Name] <> N''),
	[FacultyId] int not null,
	[HeadId] int not null
);
go

create table [Faculties]
(
	[Id] int not null identity(1, 1) primary key,
	[Building] int not null check ([Building] between 1 and 5),
	[Name] nvarchar(100) not null unique check ([Name] <> N''),
	[DeanId] int not null
);
go

create table [Groups]
(
	[Id] int not null identity(1, 1) primary key,
	[Name] nvarchar(10) not null unique check ([Name] <> N''),
	[Year] int not null check ([Year] between 1 and 5),
	[DepartmentId] int not null
);
go

create table [GroupsCurators]
(
	[Id] int not null identity(1, 1) primary key,
	[CuratorId] int not null,
	[GroupId] int not null
);
go

create table [GroupsLectures]
(
	[Id] int not null identity(1, 1) primary key,
	[GroupId] int not null,
	[LectureId] int not null
);
go

create table [Heads]
(
	[Id] int not null identity(1, 1) primary key,
	[TeacherId] int not null
);
go

create table [LectureRooms]
(
	[Id] int not null identity(1, 1) primary key,
	[Building] int not null check ([Building] between 1 and 5),
	[Name] nvarchar(10) not null unique check ([Name] <> N'')
);
go

create table [Lectures]
(
	[Id] int not null identity(1, 1) primary key,
	[SubjectId] int not null,
	[TeacherId] int not null
);
go

create table [Schedules]
(
	[Id] int not null identity(1, 1) primary key,
	[Class] int not null check ([Class] between 1 and 8),
	[DayOfWeek] int not null check ([DayOfWeek] between 1 and 7),
	[Week] int not null check ([Week] between 1 and 52),
	[LectureId] int not null,
	[LectureRoomId] int not null
);
go

create table [Subjects]
(
	[Id] int not null identity(1, 1) primary key,
	[Name] nvarchar(100) not null unique check ([Name] <> N'')
);
go

create table [Teachers]
(
	[Id] int not null identity(1, 1) primary key,
	[Name] nvarchar(max) not null check ([Name] <> N''),
	[Surname] nvarchar(max) not null check ([Surname] <> N'')
);
go

alter table [Assistants]
add foreign key ([TeacherId]) references [Teachers]([Id]);
go

alter table [Curators]
add foreign key ([TeacherId]) references [Teachers]([Id]);
go

alter table [Deans]
add foreign key ([TeacherId]) references [Teachers]([Id]);
go

alter table [Departments]
add foreign key ([FacultyId]) references [Faculties]([Id]);
go

alter table [Departments]
add foreign key ([HeadId]) references [Heads]([Id]);
go

alter table [Faculties]
add foreign key ([DeanId]) references [Deans]([Id]);
go

alter table [Groups]
add foreign key ([DepartmentId]) references [Departments]([Id]);
go

alter table [GroupsCurators]
add foreign key ([CuratorId]) references [Curators]([Id]);
go

alter table [GroupsCurators]
add foreign key ([GroupId]) references [Groups]([Id]);
go

alter table [GroupsLectures]
add foreign key ([GroupId]) references [Groups]([Id]);
go

alter table [GroupsLectures]
add foreign key ([LectureId]) references [Lectures]([Id]);
go

alter table [Heads]
add foreign key ([TeacherId]) references [Teachers]([Id]);
go

alter table [Lectures]
add foreign key ([SubjectId]) references [Subjects]([Id]);
go

alter table [Lectures]
add foreign key ([TeacherId]) references [Teachers]([Id]);
go

alter table [Schedules]
add foreign key ([LectureId]) references [Lectures]([Id]);
go

alter table [Schedules]
add foreign key ([LectureRoomId]) references [LectureRooms]([Id]);
go

INSERT INTO Teachers (Name, Surname) VALUES ('John', 'Doe');
INSERT INTO Teachers (Name, Surname) VALUES ('Jane', 'Smith');
INSERT INTO Teachers (Name, Surname) VALUES ('Michael', 'Johnson');
INSERT INTO Teachers (Name, Surname) VALUES ('Emily', 'Brown');
INSERT INTO Teachers (Name, Surname) VALUES ('David', 'Wilson');
INSERT INTO Teachers (Name, Surname) VALUES ('Sarah', 'Martinez');
INSERT INTO Teachers (Name, Surname) VALUES ('Christopher', 'Anderson');
INSERT INTO Teachers (Name, Surname) VALUES ('Jessica', 'Taylor');
INSERT INTO Teachers (Name, Surname) VALUES ('James', 'Thomas');
INSERT INTO Teachers (Name, Surname) VALUES ('Jennifer', 'Hernandez');

GO
INSERT INTO Assistants (TeacherId) VALUES (1);
INSERT INTO Assistants (TeacherId) VALUES (2);
INSERT INTO Assistants (TeacherId) VALUES (3);
INSERT INTO Assistants (TeacherId) VALUES (4);
INSERT INTO Assistants (TeacherId) VALUES (5);
INSERT INTO Assistants (TeacherId) VALUES (6);
INSERT INTO Assistants (TeacherId) VALUES (7);
INSERT INTO Assistants (TeacherId) VALUES (8);
INSERT INTO Assistants (TeacherId) VALUES (9);
INSERT INTO Assistants (TeacherId) VALUES (10);
GO
INSERT INTO Subjects (Name) VALUES ('Computer Science');
INSERT INTO Subjects (Name) VALUES ('Mathematics');
INSERT INTO Subjects (Name) VALUES ('Physics');
INSERT INTO Subjects (Name) VALUES ('Chemistry');
INSERT INTO Subjects (Name) VALUES ('Biology');
INSERT INTO Subjects (Name) VALUES ('Literature');
INSERT INTO Subjects (Name) VALUES ('History');
INSERT INTO Subjects (Name) VALUES ('Psychology');
INSERT INTO Subjects (Name) VALUES ('Sociology');
INSERT INTO Subjects (Name) VALUES ('Art History');
INSERT INTO Subjects (Name) VALUES ('Music');
INSERT INTO Subjects (Name) VALUES ('Drama');
GO
INSERT INTO LectureRooms (Building, Name) VALUES (1, 'Room A');
INSERT INTO LectureRooms (Building, Name) VALUES (2, 'Room B');
INSERT INTO LectureRooms (Building, Name) VALUES (3, 'Room C');
INSERT INTO LectureRooms (Building, Name) VALUES (4, 'Room D');
INSERT INTO LectureRooms (Building, Name) VALUES (5, 'Room E');

GO
INSERT INTO Deans (TeacherId) VALUES (1);
INSERT INTO Deans (TeacherId) VALUES (2);
INSERT INTO Deans (TeacherId) VALUES (3);
INSERT INTO Deans (TeacherId) VALUES (4);
INSERT INTO Deans (TeacherId) VALUES (5);
GO
INSERT INTO Faculties (Building, Name, DeanId) VALUES (3, 'Engineering', 1);
INSERT INTO Faculties (Building, Name, DeanId) VALUES (2, 'Science', 2);
INSERT INTO Faculties (Building, Name, DeanId) VALUES (3, 'Arts', 3);
INSERT INTO Faculties (Building, Name, DeanId) VALUES (1, 'Business', 4);
INSERT INTO Faculties (Building, Name, DeanId) VALUES (1, 'Medicine', 5);

GO
INSERT INTO Heads (TeacherId) VALUES (1);
INSERT INTO Heads (TeacherId) VALUES (2);
INSERT INTO Heads (TeacherId) VALUES (3);

GO
INSERT INTO Departments (Building, Name, FacultyId, HeadId) VALUES (2, 'Step IT', 1, 1);
INSERT INTO Departments (Building, Name, FacultyId, HeadId) VALUES (2, 'Art and Manual Arts', 1, 2);
INSERT INTO Departments (Building, Name, FacultyId, HeadId) VALUES (2, 'Brains', 2, 3);

GO
INSERT INTO Curators (TeacherId) VALUES (4);
INSERT INTO Curators (TeacherId) VALUES (5);
INSERT INTO Curators (TeacherId) VALUES (6);
INSERT INTO Curators (TeacherId) VALUES (7);
INSERT INTO Curators (TeacherId) VALUES (8);
INSERT INTO Curators (TeacherId) VALUES (9);
INSERT INTO Curators (TeacherId) VALUES (10);
INSERT INTO Curators (TeacherId) VALUES (11);
INSERT INTO Curators (TeacherId) VALUES (12);

GO
-- Example groups for department with ID 1 (Computer Science)
INSERT INTO Groups (Name, Year, DepartmentId) VALUES ('CS101', 1, 1);
INSERT INTO Groups (Name, Year, DepartmentId) VALUES ('CS201', 2, 1);
INSERT INTO Groups (Name, Year, DepartmentId) VALUES ('CS301', 3, 1);
GO
-- Example groups for department with ID 2 (Mathematics)
INSERT INTO Groups (Name, Year, DepartmentId) VALUES ('Math101', 1, 2);
INSERT INTO Groups (Name, Year, DepartmentId) VALUES ('Math201', 2, 2);
INSERT INTO Groups (Name, Year, DepartmentId) VALUES ('Math301', 3, 2);
GO
-- Example groups for department with ID 3 (Physics)
INSERT INTO Groups (Name, Year, DepartmentId) VALUES ('Phys101', 1, 3);
INSERT INTO Groups (Name, Year, DepartmentId) VALUES ('Phys201', 2, 3);
INSERT INTO Groups (Name, Year, DepartmentId) VALUES ('Phys301', 3, 3);

GO
-- Assign curators to groups
INSERT INTO GroupsCurators (CuratorId, GroupId) VALUES (1, 1); -- Curator with ID 1 assigned to Group with ID 1
INSERT INTO GroupsCurators (CuratorId, GroupId) VALUES (2, 2); -- Curator with ID 2 assigned to Group with ID 2
INSERT INTO GroupsCurators (CuratorId, GroupId) VALUES (3, 3); -- Curator with ID 3 assigned to Group with ID 3
INSERT INTO GroupsCurators (CuratorId, GroupId) VALUES (4, 4);
INSERT INTO GroupsCurators (CuratorId, GroupId) VALUES (5, 5);
INSERT INTO GroupsCurators (CuratorId, GroupId) VALUES (6, 6);
INSERT INTO GroupsCurators (CuratorId, GroupId) VALUES (7, 7);
INSERT INTO GroupsCurators (CuratorId, GroupId) VALUES (8, 8);
INSERT INTO GroupsCurators (CuratorId, GroupId) VALUES (9, 9);

GO
INSERT INTO Lectures (SubjectId, TeacherId) VALUES (1, 1); -- Assuming SubjectId 1 is associated with teacher ID 1
INSERT INTO Lectures (SubjectId, TeacherId) VALUES (2, 2); -- Assuming SubjectId 2 is associated with teacher ID 2
INSERT INTO Lectures (SubjectId, TeacherId) VALUES (3, 3);
INSERT INTO Lectures (SubjectId, TeacherId) VALUES (4, 4);
INSERT INTO Lectures (SubjectId, TeacherId) VALUES (5, 5);
INSERT INTO Lectures (SubjectId, TeacherId) VALUES (6, 6);
INSERT INTO Lectures (SubjectId, TeacherId) VALUES (7, 7);
INSERT INTO Lectures (SubjectId, TeacherId) VALUES (8, 8);
INSERT INTO Lectures (SubjectId, TeacherId) VALUES (9, 9);
INSERT INTO Lectures (SubjectId, TeacherId) VALUES (10, 10);
INSERT INTO Lectures (SubjectId, TeacherId) VALUES (11, 6);
INSERT INTO Lectures (SubjectId, TeacherId) VALUES (12, 2);
GO
-- Example associations for group CS101
INSERT INTO GroupsLectures (GroupId, LectureId) VALUES (1, 1); -- Assuming LectureId 1 is associated with group CS101

-- Example associations for group CS201
INSERT INTO GroupsLectures (GroupId, LectureId) VALUES (2, 2); -- Assuming LectureId 2 is associated with group CS201

-- Example associations for group CS301
INSERT INTO GroupsLectures (GroupId, LectureId) VALUES (3, 3); -- Assuming LectureId 3 is associated with group CS301
INSERT INTO GroupsLectures (GroupId, LectureId) VALUES (4, 4);
INSERT INTO GroupsLectures (GroupId, LectureId) VALUES (5, 5);
INSERT INTO GroupsLectures (GroupId, LectureId) VALUES (6, 6);
INSERT INTO GroupsLectures (GroupId, LectureId) VALUES (7, 7);
INSERT INTO GroupsLectures (GroupId, LectureId) VALUES (8, 8);
INSERT INTO GroupsLectures (GroupId, LectureId) VALUES (9, 9);
GO
INSERT INTO Schedules (Class, DayOfWeek, Week, LectureId, LectureRoomId) VALUES (1, 1, 1, 1, 1); -- Lecture with ID 1 on Monday, Week 1, in Lecture Room 1
INSERT INTO Schedules (Class, DayOfWeek, Week, LectureId, LectureRoomId) VALUES (2, 2, 2, 2, 2); -- Lecture with ID 2 on Tuesday, Week 2, in Lecture Room 2
INSERT INTO Schedules (Class, DayOfWeek, Week, LectureId, LectureRoomId) VALUES (3, 3, 3, 3, 3); -- Lecture with ID 3 on Wednesday, Week 3, in Lecture Room 3
INSERT INTO Schedules (Class, DayOfWeek, Week, LectureId, LectureRoomId) VALUES (2, 1, 2, 4, 1);
INSERT INTO Schedules (Class, DayOfWeek, Week, LectureId, LectureRoomId) VALUES (7, 1, 2, 5, 4);
INSERT INTO Schedules (Class, DayOfWeek, Week, LectureId, LectureRoomId) VALUES (6, 4, 2, 6, 2);
INSERT INTO Schedules (Class, DayOfWeek, Week, LectureId, LectureRoomId) VALUES (4, 3, 1, 7, 4);
INSERT INTO Schedules (Class, DayOfWeek, Week, LectureId, LectureRoomId) VALUES (5, 1, 2, 8, 5);
INSERT INTO Schedules (Class, DayOfWeek, Week, LectureId, LectureRoomId) VALUES (1, 6, 2, 9, 1);
INSERT INTO Schedules (Class, DayOfWeek, Week, LectureId, LectureRoomId) VALUES (2, 5, 2, 10, 3);
INSERT INTO Schedules (Class, DayOfWeek, Week, LectureId, LectureRoomId) VALUES (2, 4, 2, 11, 5);
INSERT INTO Schedules (Class, DayOfWeek, Week, LectureId, LectureRoomId) VALUES (2, 1, 2, 12, 2);



--1. Print names of the classrooms where the teacher "John" lectures.
SELECT LR.[Name]
FROM Teachers AS T
INNER JOIN Lectures AS L
ON T.Id=L.TeacherId
		INNER JOIN Schedules AS S
		ON S.LectureId=L.Id
			INNER JOIN LectureRooms AS LR
			ON LR.Id=S.LectureRoomId
			WHERE T.[Name]='John'

--2. Print names of the assistants who deliver lectures for the group 
--"F505"
SELECT A.[Id]
FROM Assistants AS A
INNER JOIN Teachers AS T
ON T.Id=A.TeacherId
		INNER JOIN Lectures AS L
		ON T.Id=L.TeacherId
			INNER JOIN GroupsLectures AS GL
			ON L.Id=GL.LectureId
				INNER JOIN Groups AS G
				ON G.Id=GL.GroupId
				WHERE G.[Name]='Phys101'

--3. Print subjects taught by the teacher "John" for groups 
--of the 1th year.
SELECT S.[Name]
FROM Subjects AS S
INNER JOIN Lectures AS L
ON L.SubjectId=S.Id
		INNER JOIN Teachers AS T
		ON T.Id=L.TeacherId
			INNER JOIN GroupsLectures AS GL
			ON L.Id=GL.LectureId
			INNER JOIN Groups AS G
			ON G.Id=GL.GroupId
			WHERE T.[Name]='John' AND G.[Year]=1

--4. Print names of the teachers who do not deliver lectures on 
--Mondays.	
SELECT T.[Name]
FROM Teachers AS T
INNER JOIN Lectures AS L
ON T.Id=L.TeacherId
		INNER JOIN Schedules AS S
		ON S.LectureId=L.Id
		WHERE S.[DayOfWeek]!=1

--5. Print names of the classrooms, indicating their buildings, in 
--which there are no lectures on Wednesday of the second week 
--on the third double period
SELECT LR.[Name],LR.Building
FROM Teachers AS T
INNER JOIN Lectures AS L
ON T.Id=L.TeacherId
		INNER JOIN Schedules AS S
		ON S.LectureId=L.Id
			INNER JOIN LectureRooms AS LR
			ON LR.Id=S.LectureRoomId
			WHERE  S.[DayOfWeek]!=3 AND S.[Week]!=2 AND S.Class!=3

--6. Print full names of teachers of the Engineering faculty, 
--who do not supervise groups of the Step IT department.
SELECT T.[Name]
FROM Teachers AS T
INNER JOIN Heads AS H
ON T.Id=H.TeacherId
	INNER JOIN Departments AS D
	ON H.Id=D.HeadId
	   INNER JOIN Faculties AS F
		ON F.Id=D.FacultyId
		WHERE F.[Name]='Engineering' AND D.[Name]!='Step IT'

SELECT DISTINCT T.Name, T.Surname
FROM Teachers T
JOIN Faculties F ON T.Id = F.DeanId
JOIN Departments D ON F.Id = D.FacultyId
LEFT JOIN GroupsCurators GC ON T.Id = GC.CuratorId
LEFT JOIN Groups G ON GC.GroupId = G.Id
WHERE D.Name = 'Engineering'
AND (G.DepartmentId IS NULL OR G.DepartmentId != (SELECT Id FROM Departments WHERE Name = 'Step IT'));

--7. Print numbers of all buildings that are available in the tables 
--of faculties, departments, and classrooms
SELECT Building
FROM (
    SELECT Building FROM Faculties
    UNION
    SELECT Building FROM Departments
    UNION
    SELECT Building FROM LectureRooms
) AS AllBuildings;

--8. Print full names of teachers in the following order: deans of 
--faculties, heads of departments, teachers, curators, assistants.
-- Print full names of deans of faculties
SELECT T.Name + ' ' + T.Surname AS FullName
FROM Teachers AS T
INNER JOIN Deans AS D ON T.Id = D.TeacherId
ORDER BY FullName;

-- Print full names of heads of departments
SELECT T.Name + ' ' + T.Surname AS FullName
FROM Teachers AS T
INNER JOIN Heads AS H ON T.Id = H.TeacherId
ORDER BY FullName;

-- Print full names of teachers
SELECT Name + ' ' + Surname AS FullName
FROM Teachers
WHERE Id NOT IN (SELECT TeacherId FROM Deans)
  AND Id NOT IN (SELECT TeacherId FROM Heads)
ORDER BY FullName;

-- Print full names of curators
SELECT T.Name + ' ' + T.Surname AS FullName
FROM Teachers AS T
INNER JOIN Curators AS C ON T.Id = C.TeacherId
ORDER BY FullName;

-- Print full names of assistants
SELECT T.Name + ' ' + T.Surname AS FullName
FROM Teachers AS T
INNER JOIN Assistants AS A ON T.Id = A.TeacherId
ORDER BY FullName;

--9. Print days of the week (without repetitions), in which there are 
--classes in the classrooms "A311" and "A104" of the building 6.
SELECT DISTINCT DayOfWeek
FROM Schedules AS S
INNER JOIN LectureRooms AS LR ON S.LectureRoomId = LR.Id
WHERE LR.[Building] = 6
AND LR.Name IN ('A311', 'A104');